# -*- coding: utf-8 -*-
"""GMM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pl-J4whJlNy4PbUo8aY3YhHR_Bz6qJQk
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
from pandas import DataFrame
from sklearn import datasets
from sklearn.mixture import GaussianMixture
import cv2

img = cv2.cvtColor(cv2.imread("a4_res.png"), cv2.COLOR_BGR2GRAY)
plt.imshow(img, 'gray')

shp = img.shape
shp

thresh = np.max(img)
for i in range(shp[0]):
  for j in range(shp[1]):
    if img[i][j] > 0.35*thresh :
      img[i][j] = 255
    else:
      img[i][j] = 0

plt.imshow(img, 'gray')

Xmask = []
for i in range(shp[0]):
  for j in range(shp[1]):
    if img[i][j] == 255:
      x = [j, i]
      Xmask.append(x)

Xmask = np.array(Xmask)

rot = [[-1, 0], [0, -1]]
Xmask_n = np.matmul(rot, Xmask.T)

flip = [[-1, 0], [0, 1]]
Xmask = np.matmul(flip, Xmask_n)

plt.scatter(Xmask[0], Xmask[1], c='r')

Xmask.T

Ymask = Xmask.T

shp2 = Ymask.shape
shp2

labels = []
for t in range(shp2[0]):
  i = Ymask[t][1]
  j = Ymask[t][0]
  if img[i][j] == 255 and i>-70 and i<-5 and j<145 and j>45:
    labels.append(1)
  elif img[i][j] == 255 and i>-160 and i<-90 and j>15 and j<100:
    labels.append(2)
  elif img[i][j] == 255 and i>-105 and i<-45 and j>135 and j<205:
    labels.append(3)
  elif img[i][j] == 255 and i>-155 and i<-65 and j>160 and j<295:
    labels.append(4)
  elif img[i][j] == 255 and i>-105 and i<1 and j>315:
    labels.append(5)
  else:
    labels.append(6)

labels = np.array(labels)

len(labels)

d = DataFrame(Xmask.T)
d['labels'] = labels
d

d0 = d[d['labels']== 1]
d1 = d[d['labels']== 2]
d2 = d[d['labels']== 3]
d3 = d[d['labels']== 4]
d4 = d[d['labels']== 5]
d5 = d[d['labels']== 6]

d2

plt.scatter(d0[0], d0[1], c ='r')
plt.scatter(d1[0], d1[1], c ='yellow')
plt.scatter(d2[0], d2[1], c ='g')
plt.scatter(d3[0], d3[1], c ='b')
plt.scatter(d4[0], d4[1], c ='k')
plt.scatter(d5[0], d5[1], c ='m')
plt.show()

df = DataFrame(Ymask)
df

gmm = GaussianMixture(n_components = 5)

gmm.fit(df)

# Assign a label to each sample
lbls = gmm.predict(df)
df['labels']= lbls
d0 = df[df['labels']== 0]
d1 = df[df['labels']== 1]
d2 = df[df['labels']== 2]
d3 = df[df['labels']== 3]
d4 = df[df['labels']== 4]

plt.scatter(d0[0], d0[1], c ='r')
plt.scatter(d1[0], d1[1], c ='yellow')
plt.scatter(d2[0], d2[1], c ='g')
plt.scatter(d3[0], d3[1], c ='b')
plt.scatter(d4[0], d4[1], c ='k')
plt.show()

import itertools
color_iter = itertools.cycle(["navy", "c", "cornflowerblue", "gold", "darkorange"])

def plot_results(X, Y_, means, covariances, index, title):
    splot = plt.subplot(2, 1, 1 + index)
    for i, (mean, covar, color) in enumerate(zip(means, covariances, color_iter)):
        v, w = np.linalg.eigh(covar)
        v = 2.0 * np.sqrt(2.0) * np.sqrt(v)
        u = w[0] / np.linalg.norm(w[0])

        if not np.any(Y_ == i):
            continue
        plt.scatter(X[Y_ == i, 0], X[Y_ == i, 1], 0.8, color=color)

        # Plot an ellipse to show the Gaussian component
        angle = np.arctan(u[1] / u[0])
        angle = 180.0 * angle / np.pi  # convert to degrees
        ell = mpl.patches.Ellipse(mean, v[0], v[1], angle=180.0 + angle, color=color)
        ell.set_clip_box(splot.bbox)
        ell.set_alpha(0.5)
        splot.add_artist(ell)

    plt.xticks(())
    plt.yticks(())
    plt.title(title)
    plt.show()

plot_results(Xmask.T, gmm.predict(Xmask.T), gmm.means_, gmm.covariances_, 0, "Gaussian Mixture")

"""#Final Processing Pipeline#"""

img = cv2.cvtColor(cv2.imread("a4.png"), cv2.COLOR_BGR2GRAY)
plt.imshow(img, 'gray')

shp = img.shape
shp

def thresh_img(image, th):
  if th >=1 :
    print("Not valid value (0-1).")
    return None
  shp = image.shape
  thresh = np.max(image)
  for i in range(shp[0]):
    for j in range(shp[1]):
      if image[i][j] > th*thresh :
        image[i][j] = 255
      else:
        image[i][j] = 0

  return image

img = thresh_img(img, 0.35)

plt.imshow(img, 'gray')

def mask(img):
  shp = img.shape
  Xmask = []
  for i in range(shp[0]):
    for j in range(shp[1]):
      if img[i][j] == 255:
        x = [j, i]
        Xmask.append(x)

  return np.array(Xmask)

Xmask = mask(img)

def pos_align(Xmask):
  rot = [[-1, 0], [0, -1]]
  Xmask_n = np.matmul(rot, Xmask.T)
  flip = [[-1, 0], [0, 1]]
  Xmask = np.matmul(flip, Xmask_n)
  return Xmask

Ymask = Xmask.T
df = pd.DataFrame(Ymask)

Xmask= pos_align(Xmask)
plt.scatter(Xmask[0], Xmask[1], c='r')

def get_model(comps):
  gmm = GaussianMixture(n_components = comps)
  return gmm

n_components = 10

gmm = get_model(n_components)
gmm.fit(df)

lbls = gmm.predict(df)
df['labels']= lbls

unq = df["labels"].unique()

dlabels = []
for i in range(len(unq)):
  temp = df[df["labels"] == unq[i]]
  dlabels.append(temp)

cols = ['b', 'g', 'r', 'k', 'y', 'm', 'c', '0.75', '0.85', '0.5']

def plot(labels, cols):
  for i in range(len(labels)):
    plt.scatter(labels[i][0], labels[i][1], c = cols[i])
  plt.show()

plot(dlabels, cols)